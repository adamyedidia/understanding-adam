<!doctype html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://distill.pub/template.v2.js"></script>
  <style><%= require("raw-loader!../static/style.css") %></style>
  <style type="text/css">@import "vis/playground.css";</style>
  
  <script src="vis/js/d3.min.js" charset="utf-8"></script>
  <script src="vis/js/underscore.js" charset="utf-8"></script>
  <script src="vis/js/rounding.js" charset="utf-8"></script>
  <script src="vis/util.js" charset="utf-8"></script>
  <script src="vis/GridWorld.js" charset="utf-8"></script>
  <script src="vis/LearnQV.js" charset="utf-8"></script>

  <script src="vis/compare.js" charset="utf-8"></script>

</head>


<body>


<!--   <div id="test">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500">
      <defs>
        <style>
          .cls-1 {
            fill: #fff;
            stroke: #231f20;
            stroke-miterlimit: 10;
          }
        </style>
      </defs>
      <title>Artboard 1</title>
      <g id="square">
        <rect class="cls-1" x="36.51534" y="45.1227" width="150.30675" height="150.30675"/>
      </g>
      <g id="circle">
        <circle class="cls-1" cx="350.62577" cy="124.2638" r="77.30061"/>
      </g>
    </svg>
  </div>
  <script src="vis/test.js"></script> -->

<d-front-matter>
  <script type="text/json">{
  "title": "The Paths Perspective on Value Learning",
  "description": "",
  "password": "td",
  "authors": [

    {
      "author": "Sam Greydanus<d-footnote>Author order not finalized.</d-footnote>",
      "authorURL": "https://greydanus.github.io/about.html",
      "affiliation": "Google Brain",
      "affiliationURL": "https://g.co/brain"
    },

    {
      "author": "Justin Gilmer",
      "authorURL": "https://scholar.google.com/citations?user=Ml_vQ8MAAAAJ&hl=en",
      "affiliation": "Google Brain",
      "affiliationURL": "https://g.co/brain"
    },

    {
      "author": "Chris Olah",
      "authorURL": "https://colah.github.io/",
      "affiliation": "OpenAI",
      "affiliationURL": "https://g.co/brain"
    }
  ],
  "katex": {
    "strict": false,
    "delimiters": [
      {
        "left": "$",
        "right": "$",
        "display": false
      },
      {
        "left": "$$",
        "right": "$$",
        "display": true
      }
    ]
  }
  }</script>
</d-front-matter>

<style>
  #cliff_iter .cell rect {
    fill: #e7eae7;
  }
  .cell rect {
    fill: #e7eae7;
  }
</style>

<d-title>
  <h1 style="grid-column:page;">The Paths Perspective on Value Learning</h1>
  <p  style="grid-column:page;padding-top: 10px;">
    A closer look at how Temporal Difference learning merges paths of experience for greater statistical efficiency.
  </p>
  <style>
    #compare-caption {
      grid-column: kicker;
      border-top: solid 1px rgba(0, 0, 0, 0.1);
      padding-top: 30px;
      margin-top: 10px;
    }
    #compare-figure {
      grid-column:page;
      position:relative;
      margin: 0;
      border-top: solid 1px rgba(0, 0, 0, 0.1);
      padding-top: 30px;
      margin-top: 10px;
    }
    #compare_play_button {
      margin-left: 20px;
      padding: 0 8px;
      background-color: rgba(255, 130, 0);
      border-radius: 4px;
      border: none;
      color: white;
      height: 32px;
      font-size: 13px;
      text-transform: uppercase;
      width: 100px;
    }
    #compare_play_button[disabled] {
      opacity: 0.5;
    }
  </style>
  <div id="compare-caption">

    <button id="compare_play_button" type="button" style="margin: 0 0 20px;">Play</button>
    <div class="figcaption">
      These value estimators behave differently where paths of experience intersect.
    </div>
  </div>
  <figure id="compare-figure" style="grid-column: text-start/page-end;">

    <div id="compare_hero" style="height:400px; position:relative;">
    </div>
    <script> 
      (function() {
        let compare_play_button = document.querySelector("#compare_play_button");

        let run = compare_vis(
          d3.select("#compare_hero"), 
          {algs: ["MC", "TD", "Q"], trail: true}, 
          () => {
            compare_play_button.textContent = "Play";
            compare_play_button.disabled = false;

          }
        );

        compare_play_button.addEventListener("click", () => {

          compare_play_button.textContent = "Playing..."
          compare_play_button.disabled = true;

          run();
        });

        compare_play_button.click();

      })();
      

    </script> 

  </figure>

</d-title>

<d-article>
<!-- <d-cite key="Tsividis2017HumanAtari"></d-cite> -->
  
  <h2>Introduction</h2>
  <p>
    In the last few years, reinforcement learning (RL) has made remarkable progress, including <a href="https://deepmind.com/research/alphago/">beating world-champion Go players</a>, <a href="https://blog.openai.com/learning-dexterity/">controlling robotic hands</a>, and even <a href="https://deepmind.com/blog/learning-to-generate-images/">painting pictures</a>.
  </p>

  <p>
    One of the key sub-problems of RL is value estimation â€“ learning the long-term consequences of being in a state.

    This can be tricky because future returns are generally noisy, affected by many things other than the present state. The further we look into the future, the more this becomes true.

    But while difficult, estimating value is also essential to most approaches to RL.<d-footnote>For many approaches (policy-value iteration), estimating value essentially is the whole problem, while in other approaches (actor-critic models), value estimation is essential for reducing noise.</d-footnote>
  </p>

  <p>
    The natural way to estimate the value of a state is as the average return you observe from that state. We call this Monte Carlo value estimation. 
  </p>

  <figcaption style="grid-column: kicker">
    <b>Cliff World</b> <d-cite key="Sutton2017ReinforcementIntroduction"></d-cite> is a classic RL example, where the agent learns to walk along a <span style="background: #FFD5D5">cliff</span> to reach a <span style="background: #D5D5FF">goal</span>.
  </figcaption>

  <style>
  #cliffworld-mc {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="cliffworld-mc" class="l-body">
      <img src="figures/cliffworld-path1.svg"/>
      <div class="figcaption">
        Sometimes the agent reaches its goal.
      </div>

      <img src="figures/cliffworld-path2.svg"/>
      <div class="figcaption">
        Other times it falls off the cliff.
      </div>

      <img src="figures/cliffworld-mc.svg"/>
      <div class="figcaption">
        Monte Carlo averages over trajectories where they intersect.
      </div>
  </figure>

  <p>
    If a state is visited by only one episode, Monte Carlo says its value is the return of that episode. If multiple episodes visit a state, Monte Carlo estimates its value to be the average over them.
  </p>

  <p>
    Let's write Monte Carlo a bit more formally.
    In RL, we often describe algorithms with update rules, which tell us how estimates change with one more episode.
    We'll use an "updates toward" ($\hookleftarrow$) operator to keep equations simple.<d-footnote>Details about this notation.</d-footnote>
  </p>

  <div class="eq-grid" style="grid-gap: 8px;">
      <div style="grid-row: 1; grid-column: 1;"><d-math>V(s_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>R_t</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> State value </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:200px;"> Return </figcaption>
  </div>

  <p>
    Estimating value by updating towards return makes a lot of sense. After all, the <i>definition</i> of value is expected return. It might be surprising, then, that we can do better.
  </p>

  <h2>Beating Monte Carlo</h2>

    <p>
      But we <i>can</i> do better! The trick is to use a method called <i>Temporal Difference (TD) learning</i>, which bootstraps off of nearby states to make value updates.
    </p>


    <div class="eq-grid" style="grid-gap: 8px; margin-top: 0; margin-bottom: 0;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>V(s_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>r_{t} </d-math></div>
      <div style="grid-row: 1; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 1; grid-column: 9;"><d-math>\gamma V(s_{t+1})</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> State value </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:140px;">Reward</figcaption>
      <figcaption style="grid-row: 2; grid-column: 9; max-width:140px;">Next state value</figcaption>

    </div>

    <p>
      Intersections between two trajectories are handled differently under this update. Unlike Monte Carlo, TD updates merge intersections so that the return flows backwards to all preceding states.
    <p>

  <style>
  #cliffworld-td {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="cliffworld-td" class="l-body">
      <img src="figures/cliffworld-path1.svg"/>
      <div class="figcaption">
        Sometimes the agent reaches its goal.
      </div>

      <img src="figures/cliffworld-path2.svg"/>
      <div class="figcaption">
        Other times it falls off the cliff.
      </div>

      <img src="figures/cliffworld-td.svg"/>
      <div class="figcaption">
        TD learning merges paths where they intersect.
      </div>
  </figure>

    <p>
      What does it mean to "merge trajectories" in a more formal sense? Why might it be a good idea? One thing to notice is that $V(s_{t+1})$ can be written as the expectation over all of its TD updates:
    <p>


    <div class="eq-grid" style="grid-gap: 8px;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>V(s_{t+1})~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\simeq~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>\mathop{\mathbb{E}} \bigr[ r'_{t+1} ~+~ \gamma V(s'_{t+2}) \bigl] </d-math></div>

      <div style="grid-row: 3; grid-column: 3;"><d-math>\simeq~~</d-math></div>
      <div style="grid-row: 3; grid-column: 5;"><d-math>\mathop{\mathbb{E}} \bigr[ r'_{t+1} \bigl] ~~+~~ \gamma \mathop{\mathbb{E}} \bigr[ V(s'_{t+2}) \bigl] </d-math></div>

    </div>

    <p>
      We can use this to expand the TD update rule recursively:
    <p>

  <div class="eq-grid" style="grid-gap: 8px;">
  
    <div style="grid-row: 1; grid-column: 1;"><d-math>V(s_t)~</d-math></div>
    <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~</d-math></div>
    <div style="grid-row: 1; grid-column: 5;"><d-math>r_{t} </d-math></div>
    <div style="grid-row: 1; grid-column: 7;"><d-math>+</d-math></div>
    <div style="grid-row: 1; grid-column: 9;"><d-math>\gamma V(s_{t+1})</d-math></div>

    <div class="expansion-marker" style="grid-row: 2; grid-column: 9 / 14; "></div>

    <div style="grid-row: 3; grid-column: 1;"><d-math></d-math></div>
    <div style="grid-row: 3; grid-column: 3;"><d-math>\hookleftarrow~</d-math></div>
    <div style="grid-row: 3; grid-column: 5;"><d-math>r_{t} </d-math></div>
    <div style="grid-row: 3; grid-column: 7;"><d-math>+</d-math></div>
    <div style="grid-row: 3; grid-column: 9;"><d-math>\gamma \mathop{\mathbb{E}} \bigr[ r'_{t+1} \bigl]</d-math></div>
    <div style="grid-row: 3; grid-column: 11;"><d-math>+</d-math></div>
    <div style="grid-row: 3; grid-column: 13;"><d-math>\gamma^2 \mathop{\mathbb{E}} \bigr[ V(s''_{t+3}) \bigl]</d-math></div>

    <div class="expansion-marker" style="grid-row: 4; grid-column: 13 / 18; "></div>

    <div style="grid-row: 5; grid-column: 1;"><d-math></d-math></div>
    <div style="grid-row: 5; grid-column: 3;"><d-math>\hookleftarrow~</d-math></div>
    <div style="grid-row: 5; grid-column: 5;"><d-math>r_{t} </d-math></div>
    <div style="grid-row: 5; grid-column: 7;"><d-math>+</d-math></div>
    <div style="grid-row: 5; grid-column: 9;"><d-math>\gamma \mathop{\mathbb{E}} ~ \bigr[ r'_{t+1} \bigl]</d-math></div>
    <div style="grid-row: 5; grid-column: 11;"><d-math>+</d-math></div>
    <div style="grid-row: 5; grid-column: 13;"><d-math>\gamma^2 \mathop{\mathbb{EE}}  ~ \bigr[ r''_{t+2} \bigl]</d-math></div>
    <div style="grid-row: 5; grid-column: 15;"><d-math>+~</d-math></div>
    <div style="grid-row: 5; grid-column: 17;"><d-math>...~~</d-math></div>

</div>

    <p>
      This gives us a strange-looking sum of nested expectation values. At first glance, it's not clear how we should compare them to the more simple-looking Monte Carlo update. More importantly, it's not clear that we <i>should</i> compare the two; the updates are so different that it feels a bit like comparing apples to oranges. Indeed, it's easy to think of Monte Carlo and TD learning as two entirely different approaches.
    </p>

    <p>
      But they are not so different after all. Let's rewrite the Monte Carlo update in terms of reward and place it beside the expanded TD update.
    </p>
  
  <div class="eq-grid" style="grid-gap: 8px;">

    <figcaption style="grid-row: 1; grid-column: 1/3; max-width:140px;"><b>MC update</b></figcaption>
    <div style="grid-row: 2; grid-column: 1;"><d-math>V(s_t)~</d-math></div>
    <div style="grid-row: 2; grid-column: 3;"><d-math>~\hookleftarrow~~</d-math></div>
    <div style="grid-row: 2; grid-column: 5;"><d-math>r_{t}</d-math></div>
    <div style="grid-row: 2; grid-column: 7;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 9;"><d-math>\gamma ~ r_{t+1}</d-math></div>
    <div style="grid-row: 2; grid-column: 11;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 13;"><d-math>\gamma^2 ~ r_{t+2}</d-math></div>
    <div style="grid-row: 2; grid-column: 15;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>


    <figcaption style="grid-row: 3; grid-column: 5/7; max-width:90px; margin: 0px; padding: 0px;">Reward from present path.</figcaption>

    <figcaption style="grid-row: 3; grid-column: 9/11; max-width:125px; margin: 0px; padding: 0px;">Reward from present path.</figcaption>

    <figcaption style="grid-row: 3; grid-column: 13/14; max-width:125px; margin: 0px; padding: 0px;">Reward from present path...</figcaption>

    <figcaption style="grid-row: 4; grid-column: 1/3; max-width:140px; margin-top: 22px;"><b>TD update</b></figcaption>
    <div style="grid-row: 5; grid-column: 1;"><d-math>V(s_t)~</d-math></div>
    <div style="grid-row: 5; grid-column: 3;"><d-math>~\hookleftarrow~~</d-math></div>
    <div style="grid-row: 5; grid-column: 5;"><d-math>r_{t}</d-math></div>
    <div style="grid-row: 5; grid-column: 7;"><d-math>+~</d-math></div>
    <div style="grid-row: 5; grid-column: 9;"><d-math>\gamma \mathop{\mathbb{E}} ~ \bigr[ r'_{t+1} \bigl]</d-math></div>
    <div style="grid-row: 5; grid-column: 11;"><d-math>+~</d-math></div>
    <div style="grid-row: 5; grid-column: 13;"><d-math>\gamma^2 \mathop{\mathbb{EE}} ~ \bigr[ r''_{t+2} \bigl]</d-math></div>
    <div style="grid-row: 5; grid-column: 15;"><d-math>+~</d-math></div>
    <div style="grid-row: 5; grid-column: 17;"><d-math>...</d-math></div>

    <figcaption style="grid-row: 6; grid-column: 5/7; max-width:90px; margin: 0px; padding: 0px;">Reward from present path.</figcaption>

    <figcaption style="grid-row: 6; grid-column: 9/11; max-width:125px; margin: 0px; padding: 0px;">Expectation over paths intersecting present path.</figcaption>

    <figcaption style="grid-row: 6; grid-column: 13/14; max-width:125px; margin: 0px; padding: 0px;">Expectation over paths intersecting <i>paths intersecting</i> present path...</figcaption>
  </div>


    <p>
      A pleasant correspondence has emerged. The difference between Monte Carlo and TD learning comes down to the nested expectation operators. It turns out that there is a nice visual interpretation for what they are doing. We call it the <i>paths perspective</i> on value learning.
    </p>

    <h2>The Paths Perspective</h2>

    <p>
      We often think about an agent's experience as a series of trajectories. The grouping is logical and easy to visualize.
    </p>

  <style>
  #cliffworld-trajectories {
    margin-left: auto;
    margin-right: auto;
    width: 420px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="cliffworld-trajectories" class="l-body">
      <img src="figures/cliffworld-path-1of4.svg"/>
      <div class="figcaption">
        Trajectory 1
      </div>

      <img src="figures/cliffworld-path-2of4.svg"/>
      <div class="figcaption">
        Trajectory 2
      </div>
  </figure>


    <p>
      But this way of organizing experience de-emphasizes relationships <i>between</i> trajectories. Wherever two trajectories intersect, both outcomes are valid futures for the agent. So even if the agent has followed Trajectory 1 to the intersection, it could <i>in theory</i> follow Trajectory 2 from that point onward. We can dramatically expand the agent's experience using these simulated trajectories or "paths."
    </p>

    <style>
  #cliffworld-paths {
    margin-left: auto;
    margin-right: auto;
    width: 840px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="cliffworld-paths" class="l-page">
      <img src="figures/cliffworld-path-1of4.svg"/>
      <div class="figcaption">
        Path 1
      </div>

      <img src="figures/cliffworld-path-2of4.svg"/>
      <div class="figcaption">
        Path 2
      </div>

      <img src="figures/cliffworld-path-3of4.svg"/>
      <div class="figcaption">
        Path 3
      </div>

      <img src="figures/cliffworld-path-4of4.svg"/>
      <div class="figcaption">
        Path 4
      </div>
  </figure>

    <p>
      <b>Estimating value.</b> It turns out that Monte Carlo is averaging over real trajectories whereas TD learning is averaging over paths. The nested expectation values we saw earlier correspond to the agent averaging across <i>all possible future paths</i>.
    </p>

  <style>
  #compare-mctd {
    margin-left: auto;
    margin-right: auto;
    width: 800px;
    display: grid;
    grid-template-columns: .955fr 2fr .4fr 2fr 2fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="compare-mctd" class="l-page">
      <img src="figures/traj-thumbnails.svg"/>
      <div class="figcaption">
        Trajectories
      </div>

      <img src="figures/cliffworld-mc.svg"/>
      <div class="figcaption">
        MC estimate
      </div>

      <div></div>
      <div></div>

      <img src="figures/path-thumbnails.svg"/>
      <div class="figcaption">
        Paths
      </div>

      <img src="figures/cliffworld-td.svg"/>
      <div class="figcaption">
        TD estimate
      </div>
  </figure>

    <p>
      <b>Comparing the two.</b> Generally speaking, the best value estimate is the one with the lowest variance. Since both TD and Monte Carlo are empirical averages,<d-footnote>In the tabular case.</d-footnote> the method that gives the better estimate is the one that averages over more items. This raises a natural question: Which estimator averages over more items?
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>Var[V(s)]~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\propto~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>\frac{1}{N} </d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> Variance of estimate </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:140px;">Inverse of the number of items in the average</figcaption>

    </div>

    <p>
      First off, TD learning never averages over <i>fewer</i> trajectories than Monte Carlo because there are never fewer simulated trajectories (paths) than real trajectories. On the other hand, when there are more simulated trajectories (paths) than real trajectories, TD learning has the chance to average over more of the agent's experience. Given this intuition, it seems plausible that TD estimates will have lower variance.
    </p>

    <!-- <p>
      <b>Analyzing variance.</b> It's possible to express this idea more formally by writing out the variances of the Monte Carlo and TD estimates. We show how to do this in the <a href="#variance-analysis-appendix">Appendix</a>, but for now, we'll simply show the final equations. Note that we've introduced some new notation, $T(s)$, which counts the number of trajectories that contain state $s$.
    </p> -->

    <!-- <div class="eq-grid" style="grid-gap: 8px;">

      <figcaption style="grid-row: 1; grid-column: 1; max-width:140px;"><b>MC variance</b></figcaption>

      <div style="grid-row: 2; grid-column: 1;"><d-math>Var[ V(s_t)]~</d-math></div>
      <div style="grid-row: 2; grid-column: 3;"><d-math>~\propto~~</d-math></div>
      <div style="grid-row: 2; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 2; grid-column: 7;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 9;"><d-math>~\frac{\gamma}{T(s_{t+1})}</d-math></div>
      <div style="grid-row: 2; grid-column: 11;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 13;"><d-math>~~\frac{\gamma^2}{T(s_{t+2})}</d-math></div>
      <div style="grid-row: 2; grid-column: 15;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>


      <figcaption style="grid-row: 4; grid-column: 5;"><d-math>~~~~=</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 9;"><d-math>~~~~~~~~\geq</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 13;"><d-math>~~~~~~~~~\geq</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 17;"><d-math>\geq</d-math></figcaption>

      <figcaption style="grid-row: 6; grid-column: 0; max-width:140px;"><b>TD variance</b></figcaption>

      <div style="grid-row: 7; grid-column: 1;"><d-math>Var[V(s_t)]~~</d-math></div>
      <div style="grid-row: 7; grid-column: 3;"><d-math>~\propto~~</d-math></div>
      <div style="grid-row: 7; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 7; grid-column: 7;"><d-math>~+~</d-math></div>
      <div style="grid-row: 7; grid-column: 9;"><d-math> \frac{\gamma}{ \mathop{\mathbb{E}} [ T(s'_{t+1}) ] }</d-math></div>
      <div style="grid-row: 7; grid-column: 11;"><d-math>~+~</d-math></div>
      <div style="grid-row: 7; grid-column: 13;"><d-math>\frac{\gamma^2 }{\mathop{\mathbb{EE}} [T(s''_{t+2})]}</d-math></div>
      <div style="grid-row: 7; grid-column: 15;"><d-math>~+~</d-math></div>
      <div style="grid-row: 7; grid-column: 17;"><d-math>...</d-math></div>
  </div> -->

<!--     <p>
      Since every term in the first sum is greater than or equal to the corresponding term in the second sum, tabular<d-footnote>It's important to note that this inequality only holds for tabular value estimators. Later on we'll see that things change when we add function approximation to the mix.</d-footnote> TD estimates will always have equal or lower variance than Monte Carlo.
    </p> -->


    <h2>Re-weighting paths with $Q$-functions</h2>
    
    <p>
      An alternative to the value function is the $Q$-function. One motivation for $Q$-functions is that they make it easier to compare actions:
    </p>

  <style>
  #qlearning-intro {
    margin-left: auto;
    margin-right: auto;
    width: 550px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 30px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="qlearning-intro" class="l-page">
      <img src="figures/policy.svg"/>
      <div class="figcaption">
        Many times weâ€™d like to compare the value of actions under a policy.
      </div>

      <img src="figures/value.svg"/>
      <div class="figcaption">
        Itâ€™s hard to do this with a value function.
      </div>

      <img src="figures/qvalue.svg"/>
      <div class="figcaption">
        Itâ€™s easier to use $Q$-functions which estimate joint state-action values.
      </div>
  </figure>

    <p>
      We'll see some other nice properties of $Q$-functions in this section. First, though, we need to modify our Monte Carlo and TD update rules.
    </p>

    <p>
      <b>Monte Carlo for $Q$-functions.</b> The Monte Carlo update rule looks nearly identical to the one we wrote down for $V(s)$:
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">
      <div style="grid-row: 1; grid-column: 1;"><d-math>Q(s_t, a_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>R_t</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> State-action value </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:200px;"> Return </figcaption>
    </div>

    <p>
      We still update towards the return. Instead of updating towards the return of being in some state, though, we now update towards the return of being in some state <i>and selecting some action</i>.
    </p>



    <p>
      <b>TD learning and $Q$-functions.</b> We can try adapting the TD learning rule in the same manner:
    </p>

    <div class="eq-grid" style="grid-gap: 8px; margin-top: 0; margin-bottom: 0;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>Q(s_t, a_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>r_{t} </d-math></div>
      <div style="grid-row: 1; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 1; grid-column: 9;"><d-math>\gamma Q(s_{t+1}, a_{t+1})</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> State-action value </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:140px;">Reward</figcaption>
      <figcaption style="grid-row: 2; grid-column: 9; max-width:140px;">Next state value</figcaption>

    </div>

    <p>
      This version of the TD update rule requires a tuple of the form $(s_t, a_t, r_{t}, s_{t+1}, a_{t+1})$, so we call it the <i>Sarsa</i> algorithm.
      Sarsa may be the simplest way to write a $Q$-function TD update, but it's not the most efficient.
    </p>

    <p>
      <b>Expected Sarsa.</b> The problem with Sarsa is that it uses $Q(s_{t+1},a_{t+1})$ to approximate of the next state value when it should be using $V(s_{t+1})$.
    </p>

        <div class="eq-grid" style="grid-gap: 8px; margin-top: 0; margin-bottom: 0;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>Q(s_t, a_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>r_{t} </d-math></div>
      <div style="grid-row: 1; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 1; grid-column: 9;"><d-math>\gamma Q(s_{t+1}, a_{t+1})</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> State-action value </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:140px;">Reward</figcaption>
      <figcaption style="grid-row: 2; grid-column: 9/10; max-width:140px;"><span style="background: #FFD5D5">Should be $V(s_{t+1})$</span></figcaption>

    </div>

    <p>
     A better way of estimating the next state value is to instead calculate a weighted sum or expectation value over the state's $Q$ values. This approach is called <i>Expected Sarsa</i>.
    </p>

      <style>
      #expected-sarsa {
        width: 700px;
        display: grid;
        grid-template-columns: .35fr 1fr;
        grid-template-rows: auto auto;
        grid-row-gap: 20px;
        grid-column-gap: 30px;
        grid-auto-flow: row;
      }
    </style>
    <figure id="expected-sarsa" class="l-body">
      <div class="figcaption">
        <b>Sarsa</b> uses the $Q$-value associated with $a_{t+1}$ to estimate the next state's value.
      </div>
      <img src="figures/sarsa.svg"/>
      <div class="figcaption">
        <b>Expected Sarsa</b> uses an expectation over $Q$ values to estimate the next state's values.
      </div>
      <img src="figures/expected-sarsa.svg"/>
    </figure>

    <p>
      Here's a surprising fact about Expected Sarsa: the value estimate it gives is often <i>better</i> than a value estimate computed straight from the experience. This is because the expectation value weights the $Q$-values by the true policy distribution rather than the empirical policy distribution. In doing this, Expected Sarsa <i>corrects for the difference between the empirical policy distribution and the true policy distribution.</i>
    </p>

    <p>
      <b>Off-policy value estimation.</b> We can push this idea even further. Instead of weighting $Q$-values by the true policy distribution, we can instead weight them by an arbitrary policy $\pi^{off}$:
    </p>

<style>
      #off-policy {
        width: 700px;
        display: grid;
        grid-template-columns: .35fr 1fr;
        grid-template-rows: auto auto;
        grid-row-gap: 20px;
        grid-column-gap: 30px;
        grid-auto-flow: row;
      }
    </style>
    <figure id="off-policy" class="l-body">
      <div class="figcaption">
        <b>Off-policy value learning</b> weights $Q$ values by an arbitrary policy.
      </div>
      <img src="figures/off-policy.svg"/>
    </figure>

    <p>
      With this slight modification, we can estimate value under any policy we like. We can also see that Expected Sarsa is just a special case of off-policy learning where the "off" policy is the true policy.
    </p>

    <p>
      We can even think of regular Sarsa as a type of off policy learning where the "off" policy is a stochastic sample from a categorical distribution over the agent's policy.
    </p>

    <p>
      <b>Re-weighting path intersections.</b> One intuition for the off-policy correction is that it re-weights paths where they intersect. To see this, consider some state where multiple paths of experience intersect.
    </p>

  <style>
  #reweighting-1 {
    margin-left: auto;
    margin-right: auto;
    width: 120px;
    padding: 0px;
    margin-top: 0px;
    margin-bottom: 20px;
  }
  </style>
  <figure id="reweighting-1" class="l-page">
      <img src="figures/reweighting-1.svg"/>
  </figure>

    <p>
      When these paths exit the state through different actions, they get associated with different $Q$-values.
    </p>

  <style>
  #reweighting-2 {
    margin-left: auto;
    margin-right: auto;
    width: 120px;
    padding: 0px;
    margin-top: 0px;
    margin-bottom: 20px;
  }
  </style>
  <figure id="reweighting-2" class="l-page">
      <img src="figures/reweighting-2.svg"/>
  </figure>

    <p>
      We can interpret this re-weighting of $Q$-values as a re-weighting path intersections. Wherever it happens, all the "downstream" states are also affected.
    </p>

  <style>
  #reweighting-full {
    margin-left: auto;
    margin-right: auto;
    width: 650px;
  }
  </style>
  <figure id="reweighting-full" class="l-page">
    <embed type="image/svg+xml" src="figures/reweighting-full.svg" />
  </figure>
  <script src="vis/reweighting.js"></script>

    <p>
      <b>Re-weighting paths with Monte Carlo</b> At this point, a natural question is: Can we accomplish the same re-weighting effect with Monte Carlo? Technically speaking, we could. It would involve weighting each term in the return by a different coefficient:
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">

    <figcaption style="grid-row: 1; grid-column: 1/3; max-width:140px;"><b>MC update</b></figcaption>
    <div style="grid-row: 2; grid-column: 1;"><d-math>Q(s_t, a_t)~</d-math></div>
    <div style="grid-row: 2; grid-column: 3;"><d-math>~\hookleftarrow~~</d-math></div>
    <div style="grid-row: 2; grid-column: 5;"><d-math>r_{t}</d-math></div>
    <div style="grid-row: 2; grid-column: 7;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 9;"><d-math>\gamma ~ c_{1} ~ r_{t+1}</d-math></div>
    <div style="grid-row: 2; grid-column: 11;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 13;"><d-math>\gamma^2 ~ c_{2} ~ r_{t+2}</d-math></div>
    <div style="grid-row: 2; grid-column: 15;"><d-math>+~</d-math></div>
    <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>
  </div>

    <p>
      The key problem, though, is that in order to find the re-weighting coefficients $c_1, c_2, ...$ we would need to compute statistics across the agent's experience as a whole. We <i>could</i> do this, but it would be far messier than the off-policy TD update we wrote above.
    </p>



    <h2>Pruning paths with $Q$-learning</h2>

    <p>
      Many agents will explore their environments with a sub-optimal policy in order to gain new experiences. Meanwhile, they will estimate value under their optimal policy in order to stay calibrated to their test-time behavior. This is the motivation behind a special version of off-policy learning called $Q$-learning.
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">
      <figcaption style="grid-row: 1; grid-column: 1/10; max-width:300px;"><b>$Q$-learning update (step 1)</b></figcaption>

      <div style="grid-row: 2; grid-column: 1;"><d-math>V(s_{t+1})~~</d-math></div>
      <div style="grid-row: 2; grid-column: 3;"><d-math>=~~</d-math></div>
      <div style="grid-row: 2; grid-column: 5;"><d-math>\mathop{\textrm{max}} \limits_{a} Q(s,a)</d-math></div>

      <figcaption style="grid-row: 3; grid-column: 1/4; max-width:200px;"> Next state value </figcaption>
      <figcaption style="grid-row: 3; grid-column: 5/5; max-width:300px;">Value of optimal action.</figcaption>
    </div>

    <p>
      Instead of re-weighting paths, $Q$-learning prunes away all paths but the ones leading to the highest rewards. In many cases, this "optimistic" approach gives better results than Expected Sarsa or an on-policy method<d-footnote>Try using the Playground at the end of this article to compare between approaches.</d-footnote>.
    </p>

    <p>
      Pruning paths can improve an agent's value estimate dramatically when rewards are deterministic. In more noisy environments, though, it can cause problems.
    </p>

    <p>
      <b>Sometimes $Q$-learning is over-optimistic.</b> Imagine you go to a casino and play a hundred slot machines. It's your lucky day: you hit the jackpot on machine 43. Now, if you use $Q$-learning to estimate the value of being in the casino, you will choose the best outcome over all the actions you took. In other words, you will think that the value of the casino is equal to the value of the jackpot...and decide that the casino is a great place to be.
    </p>

    <p>
      But casinos don't work this way! Where did we go wrong? The problem is that $Q$-learning is over-optimistic in the presence of noisy rewards. The largest $Q$-value of a state is sometimes large just by chance; choosing it over others produces a <i>biased</i> value estimate.
    </p>

    <p>
      One way to reduce this bias is to have a friend visit the casino and play the same set of slot machines. Then, ask them what their winnings were at machine 43, and use them as your value estimate for the casino. The probability that you both scored jackpots on the same machine is very low, so this time you won't fall into the same trap. This clever fix is the idea behind double $Q$-learning.<d-cite key="VanHasselt2010DoubleQ-learning"></d-cite>
    </p>

    <!-- <p>
      This value function is not the same as the one we would compute straight from an agent's experience. When we compute a value function from the agent's experience, we average over the agent's empirical policy distribution. Here, we have weighted each $Q$-value by the true probability of each action. Since the weighting corrects for the difference between the empirical and true policy distributions, this version of $V(s)$ tends to give a better value estimate for the underlying policy.
    </p>

    <p>
      <b>Off-policy value estimation.</b> Now imagine a situation where the empirical vs. true policy distributions are not just slightly different -- instead, they are completely different. Perhaps the experience was collected under policy $\pi_1$ and now we want to use it to estimate value under policy $\pi_2$. This is called "off-policy" value estimation.
    </p> -->


    <!-- <style>
      #off-policy-value {
        margin-left: auto;
        margin-right: auto;
        width: 710px;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto auto;
        grid-row-gap: 30px;
        grid-auto-flow: row;
      }
    </style>
    <figure id="off-policy-value" class="l-page">
      <img src="figures/on-policy-value.svg"/>
      <img src="figures/off-policy-value.svg"/>
    </figure> -->

    <!-- <p>
      Off policy value estimation has many uses. One special case is so useful that it has its own name: $Q$-learning.
    </p>

    <p>
      <b>$Q$-learning.</b> The idea behind $Q$-learning is to estimate value under an optimal policy while collecting experience under a non-optimal policy. This allows the agent to gain new experiences (via a sub-optimal policy) while staying calibrated to its test-time behavior.
    </p>

    <p>
      In $Q$-learning, every value update has two parts. The first is a normal TD update which estimates value under the current policy. The second is a maximum over $Q$-values that re-weights the value estimate according to the optimal policy.
    </p> -->

    <!-- <div class="eq-grid" style="grid-gap: 8px;">
    
      <div style="grid-row: 1; grid-column: 1;"><d-math>Q(s_t, a_t)~~</d-math></div>
      <div style="grid-row: 1; grid-column: 3;"><d-math>\hookleftarrow~~</d-math></div>
      <div style="grid-row: 1; grid-column: 5;"><d-math>r_t </d-math></div>
      <div style="grid-row: 1; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 1; grid-column: 9;"><d-math>\gamma V(s_{t+1})</d-math></div>

      <figcaption style="grid-row: 2; grid-column: 1; max-width:140px;"> $Q$-function </figcaption>
      <figcaption style="grid-row: 2; grid-column: 5; max-width:140px;">Reward</figcaption>
      <figcaption style="grid-row: 2; grid-column: 9; max-width:140px;">Next state value</figcaption>

      <div style="grid-row: 5; grid-column: 1;"><d-math>V(s)~~</d-math></div>
      <div style="grid-row: 5; grid-column: 3;"><d-math>=~~</d-math></div>
      <div style="grid-row: 5; grid-column: 5;"><d-math>\mathop{\textrm{max}} \limits_{a} Q(s,a)</d-math></div>

      <figcaption style="grid-row: 6; grid-column: 1/4; max-width:200px;"> Value function </figcaption>
      <figcaption style="grid-row: 6; grid-column: 5; max-width:140px;">Re-weighting</figcaption>

    </div> -->

<!--     <p>
      To make the connection between off-policy value estimation and $Q$-learning even more explicit, we can place them beside one another.
    </p> -->


<!--     <style>
      #q-learning {
        margin-left: auto;
        margin-right: auto;
        width: 710px;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto auto;
        grid-row-gap: 30px;
        grid-auto-flow: row;
      }
    </style>
    <figure id="q-learning" class="l-page">
        <img src="figures/on-policy-value.svg"/>
        <img src="figures/off-policy-value.svg"/>
        <img src="figures/q-learning.svg"/>
    </figure> -->

<!--     <p>
      <b>Sometimes $Q$-learning is over-optimistic.</b> Imagine you go to a casino and play a hundred slot machines. It's your lucky day: you hit the jackpot on machine 43. Now, if you use $Q$-learning to estimate the value of being in the casino, you will choose the best outcome over all the actions you took. In other words, you will think that the value of the casino is equal to the value of the jackpot...and decide that the casino is a great place to be.
    </p>

    <p>
      But casinos don't work this way! Where did we go wrong? The problem is that $Q$-learning is over-optimistic in the presence of noisy rewards. The largest $Q$-value of a state is sometimes large just by chance; choosing it over others produces a <i>biased</i> value estimate.
    </p>

    <p>
      One way to reduce this bias is to have a friend visit the casino and play the same set of slot machines. Then, ask them what their winnings were at machine 43, and use them as your value estimate for the casino. The probability that you both scored jackpots on the same machine is very low, so this time you won't fall into the same trap. This clever fix is the idea behind double $Q$-learning.<d-cite key="VanHasselt2010DoubleQ-learning"></d-cite>
    </p> -->



    <h2>Merging Paths with Function Approximators</h2>

    <p>
      Up until now, we've learned one parameter -- the value estimate -- for every state or every state-action pair. This works well for the Cliff World example because it has a small number of states. But as the number of states becomes large or infinite -- as is the case in many interesting RL problems -- it becomes impossible to store a value estimate for each state.
    </p>

    <p>
      Instead, we must force our value estimator to have fewer parameters than there are states. We can do this with machine learning methods such as linear regression, decision trees, or neural networks. All of these methods fall under the umbrella of function approximation.
    </p>

    <p>
      An interesting property of function approximation is that updating one parameter will tend to change more than one value estimate. Let's see how this changes things by returning to the Cliff World example. This time, we'll give the environment many more states.
    </p>

  <style>
  #fnapprox-intro {
    margin-left: auto;
    margin-right: auto;
    width: 850px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="fnapprox-intro" class="l-page">
      <img src="figures/large-cliffworld-states.svg"/>
      <div class="figcaption">
        <b>Large or infinite state spaces</b> are a characteristic of many interesting RL problems. Value estimation in these spaces often requires function approximation.
      </div>

      <img src="figures/large-cliffworld-path.svg"/>
      <div class="figcaption">
        <b>Tabular value functions</b> keep value estimates for each individual state. They consume a great deal of memory and don't generalize.
      </div>

      <img src="figures/large-cliffworld-approx.svg"/>
      <div class="figcaption">
        <b>Euclidean averagers</b> â€“ which are a type of function approximation â€“ save memory and let agents generalize to states they haven't yet visited.
      </div>
  </figure>

    <p>
      <b>Merging nearby paths.</b> From the paths perspective, we can interpret function approximation as a way of merging nearby paths. But what do we mean by "nearby"? In the figure above, we have made an implicit decision to measure "nearby" with Euclidean distance. This was a good idea, because the Euclidean distance between two states is highly correlated with the probability that the agent will transition between them.
    </p>

    <p>
      However, it's easy to imagine cases where this implicit assumption breaks down. By adding a single long barrier, we can construct a case where the Euclidean distance metric leads to bad generalization. The problem is that we have merged the wrong paths.
    </p>

  <style>
  #fnapprox-barrier {
    margin-left: auto;
    margin-right: auto;
    width: 700px;
    display: grid;
    grid-template-columns: 1fr 1.464fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="fnapprox-barrier" class="l-page">
      <img src="figures/large-cliffworld-barrier-intro.svg"/>
      <div class="figcaption">
        Imagine changing the Cliff World setup by adding a long barrier.
      </div>

      <img src="figures/large-cliffworld-barrier.svg"/>
      <div class="figcaption">
        Now using the Euclidean averager leads to bad value updates.
      </div>
  </figure>

    <p>
      <b>Merging the wrong paths.</b> The diagram below shows the effects of merging the wrong paths a bit more explicitly. Since the Euclidean averager is to blame for poor generalization, both Monte Carlo and TD make bad value updates. However, TD learning amplifies these errors dramatically whereas Monte Carlo does not.
    </p>

  <style>
  #fnapprox-compare {
    margin-left: auto;
    margin-right: auto;
    width: 675px;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: column;
  }
  </style>
  <figure id="fnapprox-compare" class="l-page">
      <img src="figures/compare-function-approx.svg"/>
  </figure>
  
    <p>
      We've seen that TD learning makes more efficient value updates. The price we pay, though, is that these updates end up being much more sensitive to bad value updates.
    </p>



    <h2>Implications for deep reinforcement learning</h2>

    <p>
      <b>Neural networks.</b> Deep neural networks are perhaps the most popular function approximators for reinforcement learning. These models are exciting for many reasons, but one particularly nice property is that they don't make implicit assumptions about which states are "nearby."
    </p>

    <p>
      Early in training, neural networks, like averagers, tend to merge the wrong paths of experience. In the Cliff Walking example, an untrained neural network might make the same bad value updates as the Euclidean averager.
    </p>

    <p>
      But as training progresses, neural networks can actually learn to overcome these errors. They learn which states are "nearby" from experience. In the Cliff World example, we might expect a fully-trained neural network to have learned that value updates to states <i>above</i> the barrier should never affect the values of states <i>below</i> the barrier. This isn't something that most other function approximators can do. It's part of the reason why deep RL is so interesting!
    </p>

      <style>
  #nn-latent-distance {
    margin-left: auto;
    margin-right: auto;
    width: 550px;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 20px;
    grid-row-gap: 10px;
    grid-auto-flow: row;
  }
  </style>
  <figure id="nn-latent-distance" class="l-page">
      <img src="figures/latent-distance.png"/>
      <div class="figcaption">
        A distance metric learned by a neural network <d-cite key="Srinivas2018UniversalNetworks"></d-cite>. <b>Lighter blue $\rightarrow$ more distant</b>. The agent, which was trained to grasp objects using the robotic arm, takes into account obstacles and arm length when it measures the distance between two states.
      </div>
  </figure>

    <p>
      <b>TD or not TD?</b> So far, we've seen how TD learning can outperform Monte Carlo by merging paths of experience where they intersect. We've also seen that merging paths is a double-edged sword: when function approximation causes bad value updates, TD can end up doing worse that Monte Carlo.
    </p>

    <p>
      There's an informal consensus that TD works better than Monte Carlo for deep RL. Indeed, TD methods have dominated the RL literature for the past several decades. There are still some notable exceptions: one recent paper shows that Monte Carlo can still outperform TD methods in certain environments<d-cite key="Amiranashvili2018TDLearning"></d-cite>.
    </p>

    <p>
      Since Monte Carlo and TD learning both have desirable properties, why not try building a value estimator that is a mixture of the two? That's the reasoning behind TD($\lambda$) learning. It's a technique that simply interpolates (using the coefficient $\lambda$) between Monte Carlo and TD updates<d-footnote>In the limit $\lambda=0$, we recover the TD update rule. Meanwhile, when $\lambda=1$, we recover Monte Carlo.</d-footnote>. Often, TD($\lambda$) works better than either Monte Carlo or TD learning alone<d-footnote>Researchers often keep the $\lambda$ coefficient constant as they train a deep RL model. However, if Monte Carlo learning is best early in training (before the agent has learned a good state representation) and TD learning is best later on (when it's easier to benefit from merging paths), maybe the best approach is to anneal $\lambda$ over the course of training!</d-footnote>.
    </p>


    <h2>Conclusion</h2>
    <p>
      An RL agent can improve its policy by looking at separate episodes of experience, one at a time. When it does this, though, it discards a rich source of information: the ways that states from different episodes intersect with one another. The paths perspective is meant to emphasize this second source of information, and to demonstrate how some value estimators, like TD learning, make use of it whereas others, like Monte Carlo, do not.
    </p>

    <p>
      We hope the paths perspective clarifies the relationship between some of the most fundamental approaches to value learning. Understanding these relationships and how they affect the way an agent learns is the first step to making even better RL agents.
    </p>

    <h2>Playground</h2>
    <p>
      We encourage you to verify -- and build upon -- the intuitions outlined in this article using the playground below. Try watching value estimates improve with experience or comparing Monte Carlo to one of the TD value estimators.
    </p>

    <div id="playground"></div>
    <script src="vis/Playground.js" charset="utf-8"></script>




</d-article>



<d-appendix>
  <h3>Acknowledgments</h3>
  <p>
    People to thank (living list): Google AI Residency Program, Shan Carter, Ludwig Schubert, Cassandra Xia. Some correspondence with John Schulman and Dale Schuurmans.
  </p>

  <h3 id="variance-analysis-appendix">Variance Analysis</h3>

    <p>
      This section shows a quick derivation of the variance equations presented in the <i>Paths Perspective</i> section. As a broad overview, we will start with the expanded update rules we wrote down in the <i>Beating Monte Carlo</i> section and analyze the variance of each term. Then, using the fact that they are averages over one of more updates, we will analyze the variance of the estimates.
    </p>

    <p>
      Let's start with Monte Carlo. First, we will introduce a new piece of notation, <d-math>T(s)</d-math>, which counts the number of trajectories that pass through state <d-math>s</d-math>.
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">

      <figcaption style="grid-row: 1; grid-column: 1/5; max-width:140px;">MC update</figcaption>

      <div style="grid-row: 2; grid-column: 1;"><d-math>U(s_t)~</d-math></div>
      <div style="grid-row: 2; grid-column: 3;"><d-math>=~</d-math></div>
      <div style="grid-row: 2; grid-column: 5;"><d-math>~r_t</d-math></div>
      <div style="grid-row: 2; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 9;"><d-math>\gamma r'_{t+1}</d-math></div>
      <div style="grid-row: 2; grid-column: 11;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 13;"><d-math>\gamma^2 r''_{t+2}</d-math></div>
      <div style="grid-row: 2; grid-column: 15;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>

      <figcaption style="grid-row: 4; grid-column: 1/5; max-width:140px;">MC update variance</figcaption>

      <div style="grid-row: 5; grid-column: 1;"><d-math>Var[ U(s_t)]~</d-math></div>
      <div style="grid-row: 5; grid-column: 3;"><d-math>\propto~</d-math></div>
      <div style="grid-row: 5; grid-column: 5;"><d-math>~1</d-math></div>
      <div style="grid-row: 5; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 9;"><d-math>\gamma</d-math></div>
      <div style="grid-row: 5; grid-column: 11;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 13;"><d-math>\gamma^2</d-math></div>
      <div style="grid-row: 5; grid-column: 15;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 17;"><d-math>...</d-math></div>

      <figcaption style="grid-row: 7; grid-column: 1/5; max-width:140px;">MC variance</figcaption>

      <div style="grid-row: 8; grid-column: 1;"><d-math>Var[ V(s_t)]~</d-math></div>
      <div style="grid-row: 8; grid-column: 3;"><d-math>\propto~</d-math></div>
      <div style="grid-row: 8; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 8; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 8; grid-column: 9;"><d-math> \frac{\gamma}{T(s_t)}</d-math></div>
      <div style="grid-row: 8; grid-column: 11;"><d-math>+</d-math></div>
      <div style="grid-row: 8; grid-column: 13;"><d-math>\frac{\gamma^2 }{T(s_t)}</d-math></div>
      <div style="grid-row: 8; grid-column: 15;"><d-math>+</d-math></div>
      <div style="grid-row: 8; grid-column: 17;"><d-math>...</d-math></div>

    </div>

    <p>
      Now let's do the same exact thing for TD learning.
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">

      <figcaption style="grid-row: 1; grid-column: 1/5; max-width:140px;">TD update</figcaption>

      <div style="grid-row: 2; grid-column: 1;"><d-math>U(s_t)~</d-math></div>
      <div style="grid-row: 2; grid-column: 3;"><d-math>=~</d-math></div>
      <div style="grid-row: 2; grid-column: 5;"><d-math>~r_t</d-math></div>
      <div style="grid-row: 2; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 9;"><d-math>\gamma \mathop{\mathbb{E}} [ r'_{t+1} ]</d-math></div>
      <div style="grid-row: 2; grid-column: 11;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 13;"><d-math>\gamma^2 \mathop{\mathbb{EE}} [ r''_{t+2} ]</d-math></div>
      <div style="grid-row: 2; grid-column: 15;"><d-math>+</d-math></div>
      <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>

      <figcaption style="grid-row: 4; grid-column: 1/5; max-width:140px;">TD update variance</figcaption>

      <div style="grid-row: 5; grid-column: 1;"><d-math>Var[ U(s_t)]~</d-math></div>
      <div style="grid-row: 5; grid-column: 3;"><d-math>\propto~</d-math></div>
      <div style="grid-row: 5; grid-column: 5;"><d-math>~1</d-math></div>
      <div style="grid-row: 5; grid-column: 7;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 9;"><d-math>\frac{\gamma}{ \mathop{\mathbb{E}} [ T(s'_{t+1}) ] }</d-math></div>
      <div style="grid-row: 5; grid-column: 11;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 13;"><d-math>\frac{\gamma^2}{ \mathop{\mathbb{EE}} [T(s''_{t+2})]}</d-math></div>
      <div style="grid-row: 5; grid-column: 15;"><d-math>+</d-math></div>
      <div style="grid-row: 5; grid-column: 17;"><d-math>...</d-math></div>

      <figcaption style="grid-row: 7; grid-column: 9/11; font-size:12px; max-width:140px;">(no change)</figcaption>
      <figcaption style="grid-row: 7; grid-column: 13/15; font-size:12px; max-width:140px;">(no change)</figcaption>

      <figcaption style="grid-row: 8; grid-column: 1/5; max-width:140px;">TD variance</figcaption>

      <div style="grid-row: 9; grid-column: 1;"><d-math>Var[ V(s_t)]~~</d-math></div>
      <div style="grid-row: 9; grid-column: 3;"><d-math>~\propto~~</d-math></div>
      <div style="grid-row: 9; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 9; grid-column: 7;"><d-math>~+~</d-math></div>
      <div style="grid-row: 9; grid-column: 9;"><d-math> \frac{\gamma}{ \mathop{\mathbb{E}} [ T(s'_{t+1}) ]} </d-math></div>
      <div style="grid-row: 9; grid-column: 11;"><d-math>~+~</d-math></div>
      <div style="grid-row: 9; grid-column: 13;"><d-math>\frac{\gamma^2 }{\mathop{\mathbb{EE}} [T(s''_{t+2})]}</d-math></div>
      <div style="grid-row: 9; grid-column: 15;"><d-math>~+~</d-math></div>
      <div style="grid-row: 9; grid-column: 17;"><d-math>...</d-math></div>

    </div>


    <p>
      If we rewrite the third line of the Monte Carlo analysis alongside the third line of the TD analysis, we can get the same expression that we wrote down at the end of the <i>Paths Perspective</i> section:
    </p>

    <div class="eq-grid" style="grid-gap: 8px;">

      <figcaption style="grid-row: 1; grid-column: 1; max-width:140px;">MC variance</figcaption>

      <div style="grid-row: 2; grid-column: 1;"><d-math>Var[ V(s_t)]~</d-math></div>
      <div style="grid-row: 2; grid-column: 3;"><d-math>~\propto~~</d-math></div>
      <div style="grid-row: 2; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 2; grid-column: 7;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 9;"><d-math>~\frac{\gamma}{T(s_t)}</d-math></div>
      <div style="grid-row: 2; grid-column: 11;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 13;"><d-math>~~\frac{\gamma^2}{T(s_t)}</d-math></div>
      <div style="grid-row: 2; grid-column: 15;"><d-math>~+~</d-math></div>
      <div style="grid-row: 2; grid-column: 17;"><d-math>...</d-math></div>


      <figcaption style="grid-row: 4; grid-column: 5;"><d-math>~~~~=</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 9;"><d-math>~~~~~~~~\geq</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 13;"><d-math>~~~~~~~~~\geq</d-math></figcaption>
      <figcaption style="grid-row: 4; grid-column: 17;"><d-math>\geq</d-math></figcaption>

      <figcaption style="grid-row: 5; grid-column: 0; max-width:140px;">TD variance</figcaption>

      <div style="grid-row: 6; grid-column: 1;"><d-math>Var[V(s_t)]~~</d-math></div>
      <div style="grid-row: 6; grid-column: 3;"><d-math>~\propto~~</d-math></div>
      <div style="grid-row: 6; grid-column: 5;"><d-math>\frac{1}{T(s_t)}</d-math></div>
      <div style="grid-row: 6; grid-column: 7;"><d-math>~+~</d-math></div>
      <div style="grid-row: 6; grid-column: 9;"><d-math> \frac{\gamma}{ \mathop{\mathbb{E}} [ T(s'_{t+1}) ] }</d-math></div>
      <div style="grid-row: 6; grid-column: 11;"><d-math>~+~</d-math></div>
      <div style="grid-row: 6; grid-column: 13;"><d-math>\frac{\gamma^2 }{\mathop{\mathbb{E}} \mathop{\mathbb{E}} [T(s''_{t+2})]}</d-math></div>
      <div style="grid-row: 6; grid-column: 15;"><d-math>~+~</d-math></div>
      <div style="grid-row: 6; grid-column: 17;"><d-math>...</d-math></div>
    </div>

    <p>
      The next step is to note the 1:1 correspondence of terms in the two sums. For all <d-math>t' > t</d-math>we can say that <d-math>\mathop{\mathbb{E}} [T(s_{t'})] \geq T(s_{t'}) </d-math>. This means that the variance of the TD estimate will be equal or lower than the Monte Carlo estimate.
    </p>


  <d-footnote-list></d-footnote-list>
  <d-citation-list></d-citation-list>
</d-appendix>

<d-bibliography src="bibliography.bib"></d-bibliography>

</body>

