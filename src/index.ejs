<!doctype html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://distill.pub/template.v2.js"></script>
  <style><%= require("raw-loader!../static/style.css") %></style>
  <style type="text/css">@import "vis/hero.css";</style>
  
  <script src="vis/js/d3.min.js" charset="utf-8"></script>
  <script src="vis/js/underscore.js" charset="utf-8"></script>
  <script src="vis/js/rounding.js" charset="utf-8"></script>
  <script src="vis/util.js" charset="utf-8"></script>
  <script src="vis/GridWorld.js" charset="utf-8"></script>
  <script src="vis/LearnQV.js" charset="utf-8"></script>
  <script src="vis/Policy.js" charset="utf-8"></script>
  <script src="vis/Aprox.js" charset="utf-8"></script>

  <script src="vis/cliff.js" charset="utf-8"></script>
  <script src="vis/compare.js" charset="utf-8"></script>
  <script src="vis/tug.js" charset="utf-8"></script>
  <script src="vis/tug_baseline.js" charset="utf-8"></script>
  <script src="vis/reinforce.js" charset="utf-8"></script>
</head>

<body>

<d-front-matter>
  <script type="text/json">{
  "title": "The Paths Perspective on Value Learning",
  "description": "",
  "password": "td",
  "authors": [

    {
      "author": "Chris Olah",
      "authorURL": "https://colah.github.io/",
      "affiliation": "Google Brain Team",
      "affiliationURL": "https://g.co/brain"
    },

    {
      "author": "Sam Greydanus",
      "authorURL": "https://greydanus.github.io/about.html",
      "affiliation": "Google Brain Team",
      "affiliationURL": "https://g.co/brain"
    },

    {
      "author": "Justin Gilmer",
      "authorURL": "https://scholar.google.com/citations?user=Ml_vQ8MAAAAJ&hl=en",
      "affiliation": "Google Brain Team",
      "affiliationURL": "https://g.co/brain"
    }
  ],
  "katex": {
    "strict": false,
    "delimiters": [
      {
        "left": "$",
        "right": "$",
        "display": false
      },
      {
        "left": "$$",
        "right": "$$",
        "display": true
      }
    ]
  }
  }</script>
</d-front-matter>

<style>
  #cliff_iter .cell rect {
    fill: #e7eae7;
  }
  .cell rect {
    fill: #e7eae7;
  }
</style>

<d-title>
  <h1>The Paths Perspective on Value Learning</h1>
  <p>
    A closer look at how Temporal Difference (TD) learning merges paths of experience for greater statistical efficiency.
  </p>
</d-title>

  <script>
    function do_hero_vis(run) {
      compare_vis(d3.select("#compare_hero"), {algs: ["MC", "TD", "Q"] }, run);
    }
  </script>

  <figure>
    <div id="compare_hero" style="width:1000px; height:350px; margin:auto; position:relative;"></div>
    <script> do_hero_vis(false); </script> 
  </figure>

  <center> <button type="button" onclick='do_hero_vis(true)'>Run</button> </center>

<d-article>
<!-- <d-cite key="Tsividis2017HumanAtari"></d-cite> -->
  
  <h2>Introduction</h2>
  <p>
    Reinforcement learning is a field which has produced some exciting research results in the past several years. In particular, by combining reinforcement learning with neural networks, researchers have shown how to <a href="https://deepmind.com/research/alphago/">beat world-champion Go players</a>, <a href="https://blog.openai.com/learning-dexterity/">control robotic hands</a>, and even <a href="https://deepmind.com/blog/learning-to-generate-images/">paint pictures</a>.
  </p>

  <p>
    One of the things that makes reinforcement learning agents so effective is the concept of value. Some states have high value: they lead to good outcomes. Others have low value: they lead to undesirable results. The agent's goal is to learn which states are good and which are bad.
  </p>

  <p>
    This process is called value estimation. The natural way to estimate the value of a state is as the average return you observe from that state. We call this Monte Carlo value estimation:
  </p>

    <center><p>$V(s_t) \hookleftarrow R_t$</p></center>

    <figcaption class="l-gutter">
      To simplify notation, we'll use ($\hookleftarrow$) to denote a running average.
    </figcaption>

  <p>
    To make things a bit more concrete, consider a simple reinforcement learning environment called Cliff World. Here, the agent's goal is to walk along a cliff (red rectangle) in order to reach an area of high reward (blue square).
  </p>

    <figure id="cliffworld" class="l-page" style="margin-top: 0; width: 100%;">
      <center>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path1.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path2.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-mc.svg"/>
      <figcaption class="l-body">

        <div class="eq-grid" style="grid-gap: 15%; width: 65%;">
          <div style="grid-row: 1; grid-column: 1;">
            Sometimes the agent reaches its goal.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Other times it falls off the cliff.
          </div>
          <div style="grid-row: 1; grid-column: 3;">
            Monte Carlo averages over the two trajectories.
          </div>
        </div>

      </figcaption>
      </center>
    </figure>

  <p>
    Estimating value with Monte Carlo is straightforward and makes a lot of sense. In fact, it might be surprising that we can do better.
  </p>

  <h2>Beating Monte Carlo</h2>

    <p>
      But we <i>can</i> do better! The trick is to use a method called <i>Temporal Difference (TD) learning</i> which makes value updates using the value estimates of other nearby states:
    </p>

    <center><p>$V(s_t) \hookleftarrow r_t + \gamma V(s_{t+1})$</p></center>

    <p>
      Just by looking at the equation above, it's not clear why this update is any better. For one thing, it's recursive. Since it writes a state's value in terms of the value of another state, we can expand it indefinitely:
    </p>

    <p>$V(s_t) \hookleftarrow r_t + \gamma V(s_{t+1})$</p>
    <p>$V(s_t) \hookleftarrow$</p>
    <p>$\quad \quad r_t + \gamma \biggl( r_{t+1} + r'_{t'+1} + r''_{t''+1} + ... + \gamma V(s_{t+2}) + \gamma V(s'_{t'+2}) + \gamma V(s''_{t''+2}) + ... \biggr)$</p>
    
    <figcaption class="l-gutter">
      The $'$ and $''$ notations denote different trajectories.
    </figcaption>

    <p>
      Once again, let's make this idea more concrete with a Cliff World example:
    <p>

    <figure id="cliffworld-mc" class="l-page" style="margin-top: 0; width: 100%;">
      <center>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path1.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path2.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-td.svg"/>
      <figcaption class="l-body">

        <div class="eq-grid" style="grid-gap: 15%; width: 65%;">
          <div style="grid-row: 1; grid-column: 1;">
            Sometimes the agent reaches its goal.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Other times it falls off the cliff.
          </div>
          <div style="grid-row: 1; grid-column: 3;">
            TD learning averages over the two outcomes.
          </div>
        </div>

      </figcaption>
      </center>
    </figure>


    <p>
      TD Learning has a weird, recursive update rule whereas Monte Carlo just does straightforward averaging. How can we even compare the two? Why is it better to average over <i>outcomes</i> than to average over </i>trajectories</i>? Since the equations are so different, it might feel like we're comparing apples to oranges. Indeed, it's easy to think about Monte Carlo and TD learning as two entirely different approaches.
    </p>

    <p>
      But they are not completely different. Monte Carlo and TD learning are more closely-related than they might appear at first glance. In fact, the reinforcement learning literature has several excellent pieces on this topic. In this article, we will add to that literature by introducing a visual comparison of the two methods. We call this the <i>paths perspective</i> on value learning.
    </p>

    <p>
      What's more, we will show conditions where TD learning <i>always</i> beats Monte Carlo, which is something we haven't seen done before.
    </p>

    <h2>The Paths Perspective</h2>

    <p>
      <b>Trajectories.</b> In reinforcement learning, it's common to speak of an agent's experience in terms of trajectories. Trajectories are pieces of experience that have a start state and an end state. In Cliff World, for example, the start state would be whatever state the agents starts from and the end state would be either the blue square or the red rectangle.
    </p>

    <figure id="cliffworld-trajectories" class="l-page" style="margin-top: 0; width: 100%;">
      <center>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-traj-1of2.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-traj-2of2.svg"/>
      
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 50%; width: 30%;">
          <div style="grid-row: 1; grid-column: 1;">
            Trajectory 1
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Trajectory 2
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      <b>Paths.</b> A different way to think about the same experience is as paths. What makes paths different from trajectories is that at every intersection, we get to choose any path that leads out of the state. When trajectories overlap, there are often more paths than trajectories.<d-footnote>In fact, you can imagine cases where there would be <i>exponentially</i> more paths than trajectories.</d-footnote>
    </p>

        <figure id="cliffworld-mc" class="l-page" style="margin-top: 0; width: 100%;">
      <center>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path-1of4.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path-2of4.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path-3of4.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-path-4of4.svg"/>
      <figcaption class="l-body">

        <div class="eq-grid" style="grid-gap: 26%; width: 70%;">
          <div style="grid-row: 1; grid-column: 1;">
            Path 1
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Path 2
          </div>
          <div style="grid-row: 1; grid-column: 3;">
            Path 3
          </div>
          <div style="grid-row: 1; grid-column: 4;">
            Path 4
          </div>
        </div>

      </figcaption>
      </center>
    </figure>

    <p>
      <b>Estimating value.</b> Placing the value estimates of Monte Carlo and TD learning beside one another, it's easy to see that Monte Carlo is averaging value over trajectories whereas TD learning is averaging value over paths:
    </p>

        <figure id="cliffworld-trajectories" class="l-page" style="margin-top: 0; width: 100%;">
      <center>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-mc.svg"/>
        <img style="width: 20%; margin: 15px; " src="figures/cliffworld-td.svg"/>
      
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 30%; width: 40%;">
          <div style="grid-row: 1; grid-column: 1;">
            Monte Carlo value estimate.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            TD value estimate.
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      <b>Effect on variance.</b> Generally speaking, the best value estimate is the one with the lowest variance. Since both TD and Monte Carlo (as we have defined them) are empirical averages, the method that gives the better estimate, on average, will be the one that averages over more items. This raises a natural question: Which estimator averages over more items?
    </p>

    <center><p>$Var[V(s)] \propto \frac{C}{\sqrt{\textrm{paths}}}$</p></center>

    <p>
      Right off the bat, we can see that TD learning will never average <i>fewer</i> items than Monte Carlo. This is because there will never be fewer paths than trajectories; in the worst case scenario, none of the trajectories will intersect and the two estimators will behave identically. Meanwhile, there are certainly situations in which there will be more paths than trajectories. We've already seen a simple example of this in Cliff World, but it's possible to imagine situations where there are dozens of intersections and <i>orders of magnitude</i> more paths than trajectories.
    </p>

    <p>
      <b>Unique outcomes.</b> The number of trajectories versus paths roughly corresponds to the number of items being averaged over by Monte Carlo and TD learning respectively. However, there is a catch: the paths that TD learning averages over are not independent of one another. In fact, if every path leads to the same outcome, then TD learning still has no advantage over Monte Carlo. In reality, TD learning decreases variance in proportion to the number of unique outcomes that it can reach. Monte Carlo only ever sees the result of one outcome at a time, so this still puts TD learning at a considerable advantage.
    </p>

    <h2>Maximizing value with TD learning</h2>

    <p>
      If an agent wants to earn the most rewards possible, then it makes sense to focus on paths with the highest value. This is the idea behind Q-learning, which is just TD learning with two tiny modifications.
    </p>

    <center><p>$Q(s_t, a_t) \hookleftarrow r_t + \gamma V(s_{t+1})$</p></center>
    <center><p>$V(s) \max_a r_t + Q(s, a)$</p></center>

    <p>
      The first thing we've done is chop the value function up into several bins. Each of these bins corresponds to one of the actions available to the agent in state $s_t$.
    <p>

    <figure id="q-learning-intro" class="l-page" style="width: 100%; margin-top: 0px;">
      <center>
        <img style="width: 80%; margin: 0px; " src="figures/q-learning-intro.svg"/>
          
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 26%; width: 70%;">
          <div style="grid-row: 1; grid-column: 1;">
            A Q-function is a value function that has been divided up by the actions that can be taken in each state.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            It's easy to recover a value function from a Q-function. Note that $p(a)$ denotes the probability of action $a$.
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      The second thing we've done is write the value of the state as the maximum value estimate across all possible actions. This makes sense, because when the agent is not exploring – when it wants to simply achieve the maximum value possible – it should choose the action which has the highest value estimate. In that case, Q-learning gives us a clear picture of what the best possible outcome looks like.
    <p>

    <p>
      <b>Overconfidence of $Q$-learning.</b> Even though $Q$-learning has some nice properties...
    </p>


    <h2>How function approximation changes things</h2>

    <p>
      Up until now, we've kept track of a one parameter – the value of the running average – for every state. This worked fine for the simple Cliff World example, but it clearly won't work for environments that have very large or even infinite state-spaces. Unfortunately, most interesting RL problems fall under this category.
    </p>

    <p>
      What we want is to learn fewer parameters than there are states. This means that, on average, updating one of these parameters will update the value estimate of more than one state. There are many ways of doing this in practice, but they all fall under the general idea of <i>function approximation</i>.
    </p>

    <p>
      To get a better idea of how function approximation changes things, let's return to the Cliff World example. This time, though, the environment has a lot more states than before. In the figure below, you can see the difference between tabular value estimation.
    </p>

    <figure id="q-learning-intro" class="l-page" style="width: 100%; margin-top: 0px;">
      <center>
        <img style="width: 30%; margin: 15px; " src="figures/large-cliffworld-states.svg"/>
        <img style="width: 30%; margin: 15px; " src="figures/large-cliffworld-path.svg"/>
        <img style="width: 30%; margin: 15px; " src="figures/large-cliffworld-approx.svg"/>
          
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 15%; width: 90%;">
          <div style="grid-row: 1; grid-column: 1;">
            As RL environments get bigger, the number of states grows dramatically.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Tabular value functions, which keep value estimates for each individual state, consume a great deal of memory and don't generalize
          </div>
          <div style="grid-row: 1; grid-column: 3;">
            Function approximators save memory and let agents generalize to states they haven't visited.
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      <b>Merging "nearby" paths.</b> From the paths perspective, we can interpret function approximation as a way of merging nearby paths. But what do we mean by "nearby"? In the figure above, we have made an implicit decision of measuring "nearby" with Euclidean distance. This was a good idea, because the Euclidean distance between two states is highly correlated with the probability that the agent will transition between the two.
    </p>

    <p>
      However, it's easy to imagine cases where this implicit assumption breaks down. By adding a single long barrier, we can construct a case where the Euclidean distance metric leads to bad generalization. The problem is that we have merged the wrong paths.
    </p>

    <figure id="q-learning-intro" class="l-page" style="width: 100%; margin-top: 0px;">
      <center>
        <img style="width: 30%; margin: 15px; " src="figures/large-cliffworld-approx.svg"/>
        <img style="width: 30%; margin: 15px; " src="figures/large-cliffworld-barrier.svg"/>
          
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 15%; width: 70%;">
          <div style="grid-row: 1; grid-column: 1;">
            Imagine changing the Cliff World setup by adding a long barrier.
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Now ther Euclidean distance metric gives bad generalization.
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      <b>Merging the wrong paths.</b> The diagram below shows the ill effects of merging the wrong paths a bit more explicitly. Notice that, regardless of whether we use MC or TD learning, the function approximator gives a bad value estimate for the three states immediately above the barrier.
    </p>

    <figure class="l-page" style="width: 100%; margin-top: 15px;">
      <center>
        <img style="width: 70%; margin: 15px; " src="figures/compare-function-approx.svg"/>
        <figcaption class="l-body" style="width: 60%;">
          Effects of state approximation when the wrong paths are merged. Bad generalization can cause more severe errors under TD learning.
        </figcaption>
      </center>
    </figure>

    <p>
      Even though the averager is to blame for poor generalization, TD learning does much worse than Monte Carlo at handling them. This is the price we must pay for using TD learning: it is far more sensitive to these sorts of problems.
    </p>
  


    <h2>Implications for deep reinforcement learning</h2>

    <p>
      <b>Neural networks.</b> One of the most popular types of function approximator, especially in recent years, has been deep neural networks. These models are exciting for many reasons, but one particularly nice property is that they don't make implicit assumptions about which states are "nearby."
    </p>

    <p>
      <b>Learning the meaning of "nearby."</b> Early in training, neural networks, like averagers, tend to merge the wrong paths of experience. In the Cliff Walking example, an untrained neural network might make the same bad value updates as the Euclidean averager.
    </p>

    <p>
      But as training progresses, neural networks can actually learn to overcome these errors. They learn which states are "nearby" from experience. In the Cliff World example, we might expect a fully-trained neural network to have learned that value updates to states <i>above</i> the barrier should never affect the values of states <i>below</i> the barrier. This isn't something that most other function approximators can do. It's part of the reason why deep RL is so interesting!
    </p>

    <figure class="l-page" style="width: 100%; margin-top: 15px;">
      <center>
        <img style="width: 80%; margin: 15px; " src="figures/latent-distance.png"/>
      <figcaption class="l-body">
        <div class="eq-grid" style="grid-gap: 3%; width: 80%;">
          <div style="grid-row: 1; grid-column: 1;">
            A robotic hand, controlled by a neural network, that has learned its own concept of which states are "nearby."
          </div>
          <div style="grid-row: 1; grid-column: 2;">
            Dark blue circles are states that the agent thinks are "nearby" while the light blue circles are states that are far away.
          </div>
          <div style="grid-row: 1; grid-column: 3;">
            Notice that the shape and location of obstacles affects the agent's notion of distance.
          </div>
        </div>
      </figcaption>
      </center>
    </figure>

    <p>
      <b>The best of both worlds?</b> So far, we have seen that TD learning has a clear advantage over Monte Carlo in tabular settings. But for different reasons, Monte Carlo can sometimes beat TD learning (or at least compete with it) when we use function approximation. Even though neural networks can learn to overcome bad generalization, it would be better if we were able to reduce bad generalization in the first place.
    </p>

    <p>
      That's the reasoning behind TD($\lambda$) learning. It's a technique that simply interpolates (using the coefficient $\lambda$) between Monte Carlo and TD updates. <d-footnote>In the limit $\lambda=0$, we recover the TD update rule. Meanwhile, when $\lambda=1$, we recover Monte Carlo.</d-footnote> Often, TD($\lambda$) works better than either Monte Carlo or TD learning alone.

    <p>
      Researchers usually keep the $\lambda$ coefficient constant when they train a deep RL model. However, if Monte Carlo learning is best early in training (before the agent has learned a good state representation) and TD learning is best later on (when it's easier to benefit from merging paths), maybe we should gradually decrease $\lambda$ over the course of training...
    </p>

    <p>
      Perhaps there are other ways for deep RL agents to combine the the stability of Monte Carlo with the efficiency of TD learning. Deep RL is still a young area of research and there are many open questions. We hope this post clarifies the relationship between Monte Carlo and TD and encourages readers to push the comparison even further.
    </p>




    <!-- <h2>Playground</h2>
    <br>

    <p>
      In order to build intuition about how RL works, in particular about the relationship between various types of value learning, we encourage you to try training your own Gridworld agent in the playground below.
    </p>

    <p>
      TODO: Explain anything in the demo that we haven't touched on in the main body of the article.
    </p>

    <div id="playground" style="width:600px; height:450px; position:relative;"> </div>
    <script src="vis/Playground.js" charset="utf-8"></script> -->







    <div id="appendix-a"></div>
    <h2>Appendix A: When does TD have lower variance than Monte Carlo?</h2>

    <p>
      In the process of writing this post, we found it useful to re-write the pseudocode for Monte Carlo and TD learning in order to highlight formal connections between the two. Our versions of the algorithms are <i>slightly</i> different from those presented in Sutton.
    </p>

    <p>
      An exciting side effect was that, using our version of the two algorithms, we were able to show that TD learning will, on average, always converge as fast or faster than Monte Carlo learning for <i>any</i> RL agent that uses a tabular value function. We could not find any proofs of this sort online, so we wrote our own.
    </p>

    <p>
      The full text is <a href="./files/Variance_TD_vs_MC.pdf">here</a>.
    </p>

</d-article>



<d-appendix>
  <h3>Acknowledgments</h3>
  <p>
  </p>


  <d-footnote-list></d-footnote-list>
  <d-citation-list></d-citation-list>
</d-appendix>

<d-bibliography src="bibliography.bib"></d-bibliography>

</body>
